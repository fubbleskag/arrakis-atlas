
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the request.auth.uid matches the document's userId
    function isOwner(docData) {
      return isAuthenticated() && request.auth.uid == docData.userId;
    }

    // Helper function to validate the basic structure of a user profile
    // Note: uid is the document ID, not a field in the document itself.
    function isValidUserProfileData(data) {
      return data.keys().hasAll(['email', 'displayName', 'lastLogin'])
             && data.email is string || data.email == null
             && data.displayName is string || data.displayName == null
             && data.lastLogin is timestamp;
    }

    // Helper function to validate the basic structure of a map document
    function isValidMapData(data) {
      return data.keys().hasAll(['userId', 'name', 'gridState', 'createdAt', 'updatedAt'])
             && data.userId is string
             && data.userId == request.auth.uid // On create, userId must be the creator
             && data.name is string
             && data.gridState is map
             && data.createdAt is timestamp
             && data.updatedAt is timestamp;
    }
     function isValidMapDataForUpdate(newData, oldData) {
      return newData.keys().hasAll(['userId', 'name', 'gridState', 'createdAt', 'updatedAt'])
             && newData.userId is string
             && newData.userId == oldData.userId // userId cannot change
             && newData.name is string
             && newData.gridState is map
             && newData.createdAt is timestamp
             && newData.createdAt == oldData.createdAt // createdAt cannot change
             && newData.updatedAt is timestamp;
    }


    // Rules for user profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId
                      && isValidUserProfileData(request.resource.data);
      allow update: if isAuthenticated() && request.auth.uid == userId
                      && isValidUserProfileData(request.resource.data)
                      && request.resource.data.lastLogin == request.time; // Ensure lastLogin is updated to server time
      allow delete: if false; // Generally, users don't delete their own profiles directly
    }

    // Rules for maps
    match /maps/{mapId} {
      allow read: if isAuthenticated() && isOwner(resource.data);

      allow create: if isAuthenticated()
                      && isValidMapData(request.resource.data)
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.updatedAt == request.time;

      allow update: if isAuthenticated() && isOwner(resource.data)
                      && isValidMapDataForUpdate(request.resource.data, resource.data)
                      && request.resource.data.updatedAt == request.time; // Ensure updatedAt is server time

      allow delete: if isAuthenticated() && isOwner(resource.data);
    }
  }
}
