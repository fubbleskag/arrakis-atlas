
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId
                      && request.resource.data.uid == userId
                      && request.resource.data.email == request.auth.token.email
                      && (!('displayName' in request.resource.data) || request.resource.data.displayName is string || request.resource.data.displayName == null)
                      && request.resource.data.lastLogin == request.time;
      allow delete: if false; // Simplification: disallow deletion
    }

    match /maps/{mapId} {
      // Helper function to ensure ownerId and createdAt are immutable and updatedAt is correctly set for updates
      function areBaseFieldsValidForUpdate(currentData, newData) {
        return newData.ownerId == currentData.ownerId &&
               newData.createdAt == currentData.createdAt &&
               newData.updatedAt == request.time;
      }

      allow create: if request.auth.uid != null
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.name is string && request.resource.data.name.size() > 0
        && request.resource.data.gridState is map // Basic check for gridState
        && request.resource.data.collaborators[request.auth.uid] == 'owner' // Creator is owner
        && request.resource.data.collaborators.size() == 1 // Only one collaborator (owner) on create
        && request.resource.data.memberUIDs[0] == request.auth.uid && request.resource.data.memberUIDs.size() == 1 // Owner is the only member on create
        && request.resource.data.createdAt == request.time // createdAt is set by server
        && request.resource.data.updatedAt == request.time; // updatedAt is set by server

      allow read: if request.auth.uid != null
                    && resource.data.keys().hasAny(['memberUIDs'])      // Check if 'memberUIDs' field exists
                    && request.auth.uid in resource.data.memberUIDs;    // Check if user is a member

      // Simplified update rule: if user is a collaborator, they can update, respecting immutable fields.
      allow update: if request.auth.uid != null
                      && request.auth.uid in resource.data.collaborators.keys() // User must be a collaborator
                      && areBaseFieldsValidForUpdate(resource.data, request.resource.data);
                      // Note: This simplified rule allows any collaborator to change any mutable field.
                      // For more granular control (e.g., co-owners can only change name/grid),
                      // you'd need to check resource.data.collaborators[request.auth.uid] and
                      // request.resource.data.diff(resource.data).affectedKeys().

      allow delete: if request.auth.uid != null && request.auth.uid == resource.data.ownerId; // Only owner can delete
    }
  }
}
