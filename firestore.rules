rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isOwner(mapData) {
      return request.auth.uid == mapData.ownerId;
    }

    function isEditor(mapData) {
      return request.auth.uid in mapData.editors;
    }

    function isPubliclyViewable(mapData) {
        return mapData.isPublicViewable == true;
    }

    function isValidEditorUpdate(mapData) {
        let isGridUpdate = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['gridState', 'updatedAt', 'updatedBy']);
        let isLeavingMap = request.resource.data.editors == resource.data.editors.removeAll([request.auth.uid]) &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['editors', 'updatedAt', 'updatedBy']);
        return isGridUpdate || isLeavingMap;
    }
    
    match /maps/{mapId} {
      allow read: if request.auth != null && (isOwner(resource.data) || isEditor(resource.data)) || isPubliclyViewable(resource.data);
      allow create: if request.auth != null && isOwner(request.resource.data);
      allow update: if request.auth != null && (isOwner(resource.data) || (isEditor(resource.data) && isValidEditorUpdate(resource.data)));
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile.
      // This is needed to display collaborator names on maps.
      allow read: if request.auth != null;

      // A user can only create or update their own profile.
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
