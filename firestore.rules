
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a map
    function isOwner(mapData) {
      return isAuthenticated() && request.auth.uid == mapData.ownerId;
    }

    // Helper function to check if the user is a co-owner of a map
    function isCoOwner(mapData) {
      return isAuthenticated() && request.auth.uid in mapData.collaborators && mapData.collaborators[request.auth.uid] == 'co-owner';
    }

    // Helper function to check if the user is a member (owner or co-owner)
    function isMember(mapData) {
      return isOwner(mapData) || isCoOwner(mapData);
    }

    // Validate the structure of map data
    function isValidMapData(data) {
      return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.ownerId is string && data.ownerId.size() > 0 &&
             (data.gridState is map || data.gridState == null) && // Allow null for initial creation if grid is optional at first
             (data.collaborators is map) &&
             (data.ownerId in data.collaborators && data.collaborators[data.ownerId] == 'owner') &&
             // Ensure all other collaborators are co-owners
             data.collaborators.keys().removeAll([data.ownerId]).size() == 0 || data.collaborators.keys().removeAll([data.ownerId]).map(uid => data.collaborators[uid] == 'co-owner').reduce(true, acc, val => acc && val) &&
             (data.memberUIDs is list) &&
             (data.ownerId in data.memberUIDs) &&
             // Ensure all UIDs in collaborators are in memberUIDs
             data.collaborators.keys().map(uid => uid in data.memberUIDs).reduce(true, acc, val => acc && val) &&
             // Ensure all UIDs in memberUIDs are in collaborators
             data.memberUIDs.map(uid => uid in data.collaborators.keys()).reduce(true, acc, val => acc && val) &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    // Validate gridState structure more deeply if needed
    // function isValidGridState(grid) {
    //   return grid.keys().size() <= 9 && // Max 9 rows (0-8)
    //          grid.keys().map(rowKey => grid[rowKey] is list && grid[rowKey].size() == 9 && // Each row has 9 cells
    //                                  grid[rowKey].map(cell => cell.id is string && cell.icons is list && cell.notes is string)
    //                                               .reduce(true, acc, val => acc && val)
    //                              ).reduce(true, acc, val => acc && val);
    // }


    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email is string &&
                       (request.resource.data.displayName is string || request.resource.data.displayName == null) &&
                       request.resource.data.lastLogin == request.time;
      allow update: if isAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.uid == userId && // uid immutable
                       request.resource.data.email == resource.data.email && // email immutable for simplicity, or add specific logic
                       (request.resource.data.displayName is string || request.resource.data.displayName == null) &&
                       request.resource.data.lastLogin == request.time;
    }

    match /maps/{mapId} {
      let mapData = resource.data; // For read, delete
      let requestMapData = request.resource.data; // For create, update

      allow read: if isAuthenticated() && isMember(mapData);

      allow create: if isAuthenticated() &&
                       request.auth.uid == requestMapData.ownerId &&
                       isValidMapData(requestMapData) &&
                       requestMapData.createdAt == request.time &&
                       requestMapData.updatedAt == request.time &&
                       requestMapData.collaborators[request.auth.uid] == 'owner' &&
                       requestMapData.memberUIDs.size() == 1 && request.auth.uid in requestMapData.memberUIDs;

      allow update: if isAuthenticated() && isMember(mapData) &&
                       isValidMapData(requestMapData) &&
                       requestMapData.ownerId == mapData.ownerId && // Owner is immutable
                       requestMapData.createdAt == mapData.createdAt && // createdAt is immutable
                       requestMapData.updatedAt == request.time &&
                       (
                         (isOwner(mapData) &&
                           // Owner can change name, gridState, collaborators, memberUIDs
                           // No specific field list check here, relies on isValidMapData for structure
                           // and immutable checks above for critical fields.
                           // Ensure owner cannot remove themselves from 'owner' role or memberUIDs
                           requestMapData.collaborators[mapData.ownerId] == 'owner' &&
                           mapData.ownerId in requestMapData.memberUIDs
                         ) ||
                         (isCoOwner(mapData) &&
                           // Co-owner can change name and gridState
                           requestMapData.name == requestMapData.name && // This condition is tautological, just means name can change
                           requestMapData.gridState == requestMapData.gridState && // Same for gridState
                           // Co-owners cannot change collaborators or memberUIDs
                           requestMapData.collaborators == mapData.collaborators &&
                           requestMapData.memberUIDs == mapData.memberUIDs
                         )
                       );
      allow delete: if isAuthenticated() && isOwner(mapData);
    }
  }
}

    