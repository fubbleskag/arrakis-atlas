
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user profile structure
    function isValidUserProfile(data) {
      return data.keys().hasAll(['email', 'displayName', 'lastLogin']) &&
             (data.email == null || data.email is string) &&
             (data.displayName == null || data.displayName is string) &&
             data.lastLogin == request.time;
    }

    // Helper function to check map data structure (simplified)
    function isValidMapData(data, isCreate) {
      let baseValidation = data.keys().hasAll(['userId', 'name', 'gridState', 'createdAt', 'updatedAt']) &&
             data.userId is string &&
             data.name is string && data.name.size() > 0 && data.name.size() < 100 &&
             data.gridState is map; // Simple check for gridState

      if (isCreate) {
        return baseValidation &&
               data.createdAt == request.time &&
               data.updatedAt == request.time &&
               data.userId == request.auth.uid;
      }
      return baseValidation;
    }

    // Rules for user profiles
    match /users/{userId} {
      allow get: if request.auth.uid != null;
      allow list: if request.auth.uid != null; // To allow querying users by email if needed in future, but not used now.
      allow create: if request.auth.uid == userId && isValidUserProfile(request.resource.data);
      allow update: if request.auth.uid == userId &&
                      request.resource.data.keys().hasAll(['email', 'displayName', 'lastLogin']) &&
                      (request.resource.data.email == null || request.resource.data.email is string) &&
                      (request.resource.data.displayName == null || request.resource.data.displayName is string) &&
                      request.resource.data.lastLogin == request.time;
      // No delete rule for user profiles for now
    }

    // Rules for maps (simplified)
    match /maps/{mapId} {
      let mapData = resource.data;
      let requestMapData = request.resource.data;

      allow read: if request.auth.uid != null && mapData.userId == request.auth.uid;

      allow create: if request.auth.uid != null && isValidMapData(requestMapData, true);

      allow update: if request.auth.uid != null &&
                      mapData.userId == request.auth.uid && // Only creator can update
                      isValidMapData(requestMapData, false) &&
                      requestMapData.userId == mapData.userId && // userId cannot change
                      requestMapData.createdAt == mapData.createdAt && // createdAt cannot change
                      requestMapData.updatedAt == request.time; // updatedAt must be server timestamp

      allow delete: if request.auth.uid != null && mapData.userId == request.auth.uid; // Only creator can delete
    }
  }
}
