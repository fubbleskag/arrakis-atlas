
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Profiles
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && (!('displayName' in request.resource.data) || request.resource.data.displayName is string || request.resource.data.displayName == null)
                    && request.resource.data.lastLogin == request.time;
      // Disallow delete for simplicity for now
      allow delete: if false;
    }

    // Maps
    match /maps/{mapId} {
      let mapData = resource.data;
      let requestMapData = request.resource.data;
      let isAuthenticated = request.auth != null;
      let currentUserId = request.auth.uid;

      // Helper: Is the current user the owner of the existing map?
      function isOwner() {
        return isAuthenticated && currentUserId == mapData.ownerId;
      }

      // Helper: Is the current user a co-owner of the existing map?
      function isCoOwner() {
        return isAuthenticated && mapData.collaborators[currentUserId] == 'co-owner';
      }

      // Helper: Basic validation for map data on create
      function isValidNewMapData() {
        return requestMapData.name is string && requestMapData.name.size() > 0
               && requestMapData.ownerId == currentUserId
               && requestMapData.memberUIDs.hasOnly([currentUserId]) // On create, only owner is member
               && requestMapData.collaborators.keys().hasOnly([currentUserId])
               && requestMapData.collaborators[currentUserId] == 'owner'
               && requestMapData.gridState is map // Basic check for gridState
               && requestMapData.createdAt == request.time
               && requestMapData.updatedAt == request.time;
      }

      // Read: User is a member of the map
      allow read: if isAuthenticated && currentUserId in mapData.memberUIDs;

      // Create: Authenticated user, valid new map data
      allow create: if isAuthenticated && isValidNewMapData();

      // Update:
      allow update: if isAuthenticated && (
        // Case 1: Owner is updating
        (isOwner()
          && requestMapData.ownerId == mapData.ownerId // Owner ID cannot change
          && requestMapData.createdAt == mapData.createdAt // CreatedAt cannot change
          && requestMapData.updatedAt == request.time
          // Owner must remain in collaborators and memberUIDs
          && requestMapData.collaborators[mapData.ownerId] == 'owner'
          && mapData.ownerId in requestMapData.memberUIDs
          // All collaborators must be co-owners (except the owner)
          && requestMapData.collaborators.keys().filter(uid => uid != mapData.ownerId).forall(uid => requestMapData.collaborators[uid] == 'co-owner')
          // All memberUIDs must be in collaborators and vice-versa
          && requestMapData.memberUIDs.toSet().hasOnly(requestMapData.collaborators.keys())
          && requestMapData.collaborators.keys().toSet().hasOnly(requestMapData.memberUIDs)
        )
        ||
        // Case 2: Co-owner is updating (can only change name and gridState)
        (isCoOwner()
          && requestMapData.name == request.resource.data.name // Name can change
          && requestMapData.gridState == request.resource.data.gridState // Grid can change
          // Ensure other critical fields are NOT changed by co-owner
          && requestMapData.ownerId == mapData.ownerId
          && requestMapData.createdAt == mapData.createdAt
          && requestMapData.collaborators == mapData.collaborators
          && requestMapData.memberUIDs == mapData.memberUIDs
          && requestMapData.updatedAt == request.time
        )
      );

      // Delete: Only the owner can delete
      allow delete: if isOwner();
    }
  }
}
