
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an authenticated owner of the map
    function isOwner(mapData) {
      return request.auth.uid != null && request.auth.uid == mapData.ownerId;
    }

    // Helper function to check if a user is an authenticated co-owner of the map
    function isCoOwner(mapData) {
      return request.auth.uid != null && mapData.collaborators[request.auth.uid] == 'co-owner';
    }

    match /users/{userId} {
      allow read: if request.auth.uid != null;

      allow create: if request.auth.uid == userId
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    // lastLogin can be string during creation, or serverTimestamp
                    && (request.resource.data.lastLogin == request.time || request.resource.data.lastLogin is timestamp)
                    && request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'lastLogin']);


      allow update: if request.auth.uid == userId
                    && request.resource.data.uid == userId // uid immutable
                    // Allow email to be updated if it matches the auth token's email
                    && (request.resource.data.email == request.auth.token.email || request.resource.data.email == resource.data.email)
                    && request.resource.data.lastLogin == request.time
                    && request.resource.data.keys().hasOnly(['email', 'displayName', 'lastLogin', 'uid']); // uid is technically not updated but good to list

      // allow delete: if false; // Deletion not allowed for simplicity
    }

    match /maps/{mapId} {
      let mapData = resource.data;
      let requestMapData = request.resource.data;
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();

      allow create: if request.auth.uid != null
                    && requestMapData.ownerId == request.auth.uid
                    && requestMapData.memberUIDs[0] == request.auth.uid && requestMapData.memberUIDs.size() == 1
                    && requestMapData.collaborators[request.auth.uid] == 'owner' && requestMapData.collaborators.keys().size() == 1
                    && requestMapData.name is string && requestMapData.name.size() > 0
                    && requestMapData.gridState is map // Ensures gridState is a map (object)
                    && requestMapData.createdAt == request.time
                    && requestMapData.updatedAt == request.time;

      allow read: if request.auth.uid != null
                  && resource.data.keys().hasAny(['memberUIDs']) // Ensure field exists
                  && request.auth.uid in resource.data.memberUIDs;


      allow update: if request.auth.uid != null &&
                    // Common immutable fields
                    requestMapData.ownerId == mapData.ownerId &&
                    requestMapData.createdAt == mapData.createdAt &&
                    requestMapData.updatedAt == request.time &&
                    (
                      // Owner can update name, gridState, collaborators, memberUIDs
                      (isOwner(mapData) &&
                        requestMapData.collaborators[request.auth.uid] == 'owner' && // Owner must remain owner
                        request.auth.uid in requestMapData.memberUIDs && // Owner must remain a member
                        // Check that only allowed fields are being changed by the owner
                        changedKeys.removeAll(['updatedAt']).hasOnly(['name', 'gridState', 'collaborators', 'memberUIDs'])
                      ) ||
                      // Co-owner can update name, gridState
                      (isCoOwner(mapData) &&
                        // Ensure co-owner doesn't change critical fields
                        requestMapData.collaborators == mapData.collaborators &&
                        requestMapData.memberUIDs == mapData.memberUIDs &&
                        // Check that only allowed fields are being changed by co-owner
                        changedKeys.removeAll(['updatedAt']).hasOnly(['name', 'gridState'])
                      )
                    );

      allow delete: if request.auth.uid != null && isOwner(mapData);
    }
  }
}
