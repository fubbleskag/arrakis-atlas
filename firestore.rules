rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Helper Functions
    // =====================================================================
    function isOwner(mapData) {
      return request.auth.uid == mapData.ownerId;
    }

    function isEditor(mapData) {
      return request.auth.uid in mapData.editors;
    }

    // Function to check if an incoming update from an editor is valid.
    // Editors can ONLY update the gridState OR remove themselves from the editors list.
    // Any valid update must also include the 'updatedAt' field.
    function isValidEditorUpdate() {
      let incomingData = request.resource.data;
      let existingData = resource.data;
      let changedKeys = incomingData.diff(existingData).affectedKeys();

      // Check 1: Is the user an editor?
      if (!isEditor(existingData)) {
        return false;
      }
      
      // Check 2: Are they ONLY updating the grid?
      let isGridUpdate = changedKeys.hasOnly(['gridState', 'updatedAt']);
      
      // Check 3: Are they ONLY removing themselves from the editors list?
      let isRemovingSelf = (
        changedKeys.hasOnly(['editors', 'updatedAt']) &&
        incomingData.editors == existingData.editors.removeAll([request.auth.uid])
      );
      
      return isGridUpdate || isRemovingSelf;
    }

    // =====================================================================
    // Collection Rules
    // =====================================================================
    match /users/{userId} {
      allow read: if request.auth != null; // Allow any authenticated user to read profiles
      allow write: if request.auth != null && request.auth.uid == userId; // Users can only write to their own profile
    }

    match /maps/{mapId} {
      // READ: Logged-in user is owner, editor, or map is public
      allow read: if request.auth != null && (
        isOwner(resource.data) ||
        isEditor(resource.data) ||
        resource.data.isPublicViewable == true
      );

      // CREATE: Logged-in user must be the owner of the new map
      allow create: if request.auth != null && 
        request.resource.data.ownerId == request.auth.uid;
      
      // UPDATE: Logged-in user is owner OR it's a valid editor action
      allow update: if request.auth != null && 
        (isOwner(resource.data) || isValidEditorUpdate());

      // DELETE: Logged-in user must be the owner
      allow delete: if request.auth != null && isOwner(resource.data);
    }
  }
}
