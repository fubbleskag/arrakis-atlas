
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the request.auth.uid matches the document's ownerId
    function isMapOwner(mapData) {
      return isAuthenticated() && request.auth.uid == mapData.ownerId;
    }

    // Helper function to validate the basic structure of a user profile
    function isValidUserProfileData(data) {
      return data.keys().hasAll(['email', 'displayName', 'lastLogin'])
             && (data.email is string || data.email == null)
             && (data.displayName is string || data.displayName == null)
             && data.lastLogin is timestamp;
    }

    // Helper function to validate the structure of a new map document
    function isValidNewMap(data) {
      return data.keys().hasAll(['ownerId', 'name', 'gridState', 'createdAt', 'updatedAt', 'isPublicViewable', 'publicViewId', 'collaboratorShareId', 'editors'])
             && data.ownerId is string
             && data.ownerId == request.auth.uid // On create, ownerId must be the creator
             && data.name is string && data.name.size() > 0 && data.name.size() < 100 // Basic name validation
             && data.gridState is map
             && data.createdAt == request.time // Enforce server timestamp on create
             && data.updatedAt == request.time // Enforce server timestamp on create
             && data.isPublicViewable is bool
             && (data.publicViewId is string || data.publicViewId == null)
             && (data.collaboratorShareId is string || data.collaboratorShareId == null)
             && data.editors is list && data.editors.size() == 0; // Editors list must be empty on creation
    }

    // Helper function to validate the structure of an updated map document
    function isValidUpdatedMap(newData, oldData) {
      return newData.keys().hasAll(['ownerId', 'name', 'gridState', 'createdAt', 'updatedAt', 'isPublicViewable', 'publicViewId', 'collaboratorShareId', 'editors'])
             && newData.ownerId is string
             && newData.ownerId == oldData.ownerId // ownerId cannot change
             && newData.name is string && newData.name.size() > 0 && newData.name.size() < 100
             && newData.gridState is map
             && newData.createdAt is timestamp
             && newData.createdAt == oldData.createdAt // createdAt cannot change
             && newData.updatedAt == request.time // Enforce server timestamp on update
             && newData.isPublicViewable is bool
             && (newData.publicViewId is string || newData.publicViewId == null)
             && (newData.collaboratorShareId is string || newData.collaboratorShareId == null)
             && newData.editors is list;
             // Add more specific validation for editors array if needed (e.g., list of strings)
    }

    // Rules for user profiles
    match /users/{userDocId} {
      allow read: if isAuthenticated() && request.auth.uid == userDocId;
      allow create: if isAuthenticated() && request.auth.uid == userDocId
                      && isValidUserProfileData(request.resource.data)
                      && request.resource.data.lastLogin == request.time; // Ensure lastLogin is server time on create
      allow update: if isAuthenticated() && request.auth.uid == userDocId
                      && isValidUserProfileData(request.resource.data)
                      && request.resource.data.lastLogin == request.time; // Ensure lastLogin is updated to server time
      allow delete: if false; // Generally, users don't delete their own profiles directly
    }

    // Rules for maps
    match /maps/{mapId} {
      // Allow read if the user is the owner OR if the map is public.
      // The client query for public maps will include where("publicViewId", "==", id) and where("isPublicViewable", "==", true).
      // This rule allows such a query to succeed for documents matching isPublicViewable == true.
      allow read: if (isAuthenticated() && resource.data.ownerId == request.auth.uid) || 
                     (resource.data.isPublicViewable == true);

      allow create: if isAuthenticated() && isValidNewMap(request.resource.data);
      
      // Allow update if the user is the owner
      allow update: if isAuthenticated() && isMapOwner(resource.data)
                      && isValidUpdatedMap(request.resource.data, resource.data);
                      // Future: Add logic here if editors are allowed to update certain fields

      // Allow delete if the user is the owner
      allow delete: if isAuthenticated() && isMapOwner(resource.data);
    }
  }
}

    