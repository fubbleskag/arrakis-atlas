
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId &&
                             request.resource.data.uid == userId &&
                             request.resource.data.email is string &&
                             (request.resource.data.displayName == null || request.resource.data.displayName is string) &&
                             request.resource.data.lastLogin == request.time;
      allow delete: if false;
    }

    // Maps
    match /maps/{mapId} {
      // Helper functions
      function isActualOwner(mapData) {
        return request.auth.uid == mapData.ownerId;
      }
      function isActualCoOwner(mapData) {
        return request.auth.uid in mapData.collaborators && mapData.collaborators[request.auth.uid] == 'co-owner';
      }
      function isMember(mapData) { // Either owner or co-owner
        return isActualOwner(mapData) || isActualCoOwner(mapData);
      }

      // Validate map structure
      function isValidMapStructure(mapData, isCreate) {
        let isValidBase = mapData.name is string && mapData.name.size() > 0 && mapData.name.size() <= 100 &&
               mapData.ownerId is string &&
               mapData.memberUIDs is list && mapData.ownerId in mapData.memberUIDs &&
               mapData.collaborators is map &&
               // Owner must be in collaborators with 'owner' role
               mapData.collaborators[mapData.ownerId] == 'owner' &&
               // All keys in collaborators map must be strings (UIDs)
               mapData.collaborators.keys().all(key, key is string) &&
               // All roles in collaborators map must be 'owner' or 'co-owner'
               mapData.collaborators.values().hasOnly(['owner', 'co-owner']) &&
               // All UIDs in memberUIDs must be present as keys in collaborators
               mapData.memberUIDs.hasAll(mapData.collaborators.keys()) &&
               // All keys in collaborators must be present in memberUIDs
               mapData.collaborators.keys().hasAll(mapData.memberUIDs) &&
               mapData.gridState is map &&
               mapData.createdAt is timestamp &&
               mapData.updatedAt is timestamp;
        
        if (isCreate) {
            // For creation, collaborators should only contain the owner
            // and memberUIDs should only contain the owner.
            return isValidBase && 
                   mapData.collaborators.size() == 1 &&
                   mapData.memberUIDs.size() == 1;
        }
        return isValidBase;
      }
      
      allow read: if isMember(resource.data);

      allow create: if request.auth.uid != null &&
                     request.resource.data.ownerId == request.auth.uid &&
                     isValidMapStructure(request.resource.data, true) &&
                     request.resource.data.createdAt == request.time &&
                     request.resource.data.updatedAt == request.time;

      allow update: if request.auth.uid != null && isMember(resource.data) &&
                     // Common immutable fields and validation
                     request.resource.data.ownerId == resource.data.ownerId && // Owner cannot change
                     request.resource.data.createdAt == resource.data.createdAt &&
                     request.resource.data.updatedAt == request.time &&
                     isValidMapStructure(request.resource.data, false) &&
                     (
                       // Owner can update name, gridState, and collaborators (add/remove co-owners, manage their UIDs in memberUIDs)
                       (isActualOwner(resource.data) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'gridState', 'collaborators', 'memberUIDs', 'updatedAt'])
                       ) ||
                       // Co-owner can update name and gridState ONLY
                       (isActualCoOwner(resource.data) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'gridState', 'updatedAt']) &&
                        // Co-owner cannot change collaborators or memberUIDs
                        request.resource.data.collaborators == resource.data.collaborators &&
                        request.resource.data.memberUIDs == resource.data.memberUIDs
                       )
                     );
      
      allow delete: if isActualOwner(resource.data);
    }
  }
}
