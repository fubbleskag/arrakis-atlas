
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Profiles: Stores basic user information
    match /users/{userId} {
      allow read: if request.auth != null; // Allow any authenticated user to read (e.g., for email lookup)
      allow create: if request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'lastLogin']) &&
                       request.resource.data.lastLogin == request.time;
      allow update: if request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'lastLogin']) &&
                       request.resource.data.lastLogin == request.time &&
                       request.resource.data.createdAt == resource.data.createdAt; // Ensure createdAt is not changed
    }

    // Maps: Stores individual map data, including grid and collaborators
    match /maps/{mapId} {
      let ownerId = resource.data.ownerId;
      let memberUIDs = resource.data.memberUIDs;
      let collaborators = resource.data.collaborators;

      let requestOwnerId = request.resource.data.ownerId;
      let requestMemberUIDs = request.resource.data.memberUIDs;
      let requestCollaborators = request.resource.data.collaborators;
      
      let coOwnerEditableFields = ['name', 'gridState'];
      let ownerEditableFields = ['name', 'gridState', 'collaborators', 'memberUIDs']; // Owner can manage collaborators

      // Helper function to check if the user is the actual owner of the existing document
      function isActualOwner() {
        return request.auth.uid == ownerId;
      }

      // Helper function to check if the user is a co-owner of the existing document
      function isActualCoOwner() {
        return request.auth.uid in collaborators && collaborators[request.auth.uid] == 'co-owner';
      }
      
      // Helper function to check if the user is a member (owner or co-owner)
      function isMember() {
        return request.auth.uid in memberUIDs;
      }

      // Function to validate the structure and basic rules for map data
      function isValidMapData(data, isCreate) {
        return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
               data.ownerId is string && data.ownerId.size() > 0 &&
               data.memberUIDs is list && data.memberUIDs.hasAny([data.ownerId]) && // Owner must be a member
               data.memberUIDs.size() > 0 && data.memberUIDs.size() <= 50 && // Example limit
               (forall uid in data.memberUIDs: uid is string && uid.size() > 0) &&
               data.collaborators is map &&
               data.collaborators.keys().hasAll(data.memberUIDs.removeAll([data.ownerId])) && // All co-owners must be members
               data.collaborators[data.ownerId] == 'owner' && // Owner role check
               (forall uid in data.collaborators.keys(): 
                 uid is string && uid.size() > 0 && 
                 data.collaborators[uid] in ['owner', 'co-owner'] && // Valid roles
                 uid in data.memberUIDs // All collaborators must be members
               ) &&
               data.gridState is map &&
               data.updatedAt == request.time &&
               (isCreate ? data.createdAt == request.time : data.createdAt == resource.data.createdAt);
      }

      // Read: Owner and Co-Owners can read.
      allow read: if request.auth != null && isMember();

      // Create: Any authenticated user can create a map.
      // The creator becomes the owner.
      allow create: if request.auth != null &&
                       requestOwnerId == request.auth.uid &&
                       requestCollaborators[request.auth.uid] == 'owner' &&
                       requestMemberUIDs.hasAll([request.auth.uid]) &&
                       requestMemberUIDs.size() == 1 &&
                       requestCollaborators.size() == 1 &&
                       isValidMapData(request.resource.data, true);

      // Update:
      // Owner can update 'name', 'gridState', and manage 'collaborators' (add/remove co-owners) and 'memberUIDs'. Owner is immutable.
      // Co-Owners can update 'name' and 'gridState'.
      allow update: if request.auth != null && isMember() &&
                       isValidMapData(request.resource.data, false) &&
                       requestOwnerId == ownerId && // Owner cannot be changed
                       request.resource.data.collaborators[ownerId] == 'owner' && // Ensure original owner remains 'owner'
                       (
                         (isActualOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(ownerEditableFields.concat(['updatedAt', 'createdAt']))) ||
                         (isActualCoOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(coOwnerEditableFields.concat(['updatedAt', 'createdAt'])))
                       );

      // Delete: Only the owner can delete the map.
      allow delete: if request.auth != null && isActualOwner();
    }
  }
}
