rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(mapData) {
      return request.auth.uid == mapData.ownerId;
    }

    function isEditor(mapData) {
      return request.auth.uid in mapData.editors;
    }

    function isPubliclyViewable(mapData) {
        return mapData.isPublicViewable == true;
    }

    function isJoiningWithInvite(mapData, requestData) {
      let isAddingSelf = requestData.editors == mapData.editors.concat([request.auth.uid]);
      let isNotMember = request.auth.uid != mapData.ownerId && !(request.auth.uid in mapData.editors);
      let hasValidInviteId = mapData.collaboratorShareId != null;
      let onlyAllowedFieldsChanged = requestData.diff(mapData).affectedKeys().hasOnly(['editors', 'updatedAt', 'updatedBy']);
      return isAddingSelf && isNotMember && hasValidInviteId && onlyAllowedFieldsChanged;
    }

    function isValidUpdateByEditor(mapData, requestData) {
        let isGridUpdate = requestData.diff(mapData).affectedKeys().hasOnly(['gridState', 'updatedAt', 'updatedBy']);
        let isLeavingMap = requestData.editors == mapData.editors.removeAll([request.auth.uid]) &&
                           requestData.diff(mapData).affectedKeys().hasOnly(['editors', 'updatedAt', 'updatedBy']);
        return isGridUpdate || isLeavingMap;
    }
       
    match /maps/{mapId} {
    	allow read: if isPubliclyViewable(resource.data) || (request.auth != null && (isOwner(resource.data) || isEditor(resource.data) || resource.data.collaboratorShareId != null));
      allow create: if request.auth != null && isOwner(request.resource.data);
      allow update: if request.auth != null && (isOwner(resource.data) || (isEditor(resource.data) && isValidUpdateByEditor(resource.data, request.resource.data)) || isJoiningWithInvite(resource.data, request.resource.data));
      allow delete: if request.auth != null && isOwner(resource.data);
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
