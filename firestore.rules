
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return resource.data.ownerId == request.auth.uid;
    }

    function isEditor(resource) {
      return request.auth.uid in resource.data.editors;
    }

    function isCreatingOwnMap(request) {
        let data = request.resource.data;
        return data.ownerId == request.auth.uid
            && data.editors == []
            && data.createdAt == request.time
            && data.updatedAt == request.time
            && data.isPublicViewable == false;
    }
    
    function isValidEditorUpdate(request, resource) {
      let changedKeys = request.resource.data.keys().diff(resource.data.keys());

      // Scenario 1: Editor is updating the map grid.
      // This is the most common action.
      let isGridUpdate = changedKeys.hasAll(['gridState', 'updatedAt']);
      
      // Scenario 2: Editor is leaving the map.
      // They can only change the 'editors' array to remove themselves.
      let isLeavingMap = changedKeys.hasAll(['editors', 'updatedAt']) &&
                         request.resource.data.editors == resource.data.editors.removeAll([request.auth.uid]);
                         
      return isGridUpdate || isLeavingMap;
    }

    function isValidOwnerUpdate(request, resource) {
      // The owner cannot change the ownerId or the creation timestamp.
      let forbiddenKeys = ['ownerId', 'createdAt'];
      return !request.resource.data.keys().hasAny(forbiddenKeys);
    }
    
    // DOCUMENT RULES
    match /maps/{mapId} {
      allow list: if isSignedIn();

      allow get: if resource.data.isPublicViewable == true ||
                    (isSignedIn() && (isOwner(resource) || isEditor(resource)));
      
      allow create: if isSignedIn() && isCreatingOwnMap(request);
      
      allow update: if isSignedIn() && (
                      (isOwner(resource) && isValidOwnerUpdate(request, resource)) ||
                      (isEditor(resource) && isValidEditorUpdate(request, resource))
                    );

      allow delete: if isSignedIn() && isOwner(resource);
    }

    match /users/{userId} {
      allow get: if isSignedIn();
      allow create, update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if false;
    }
  }
}
