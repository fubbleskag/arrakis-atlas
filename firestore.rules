
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection: Basic profile management
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'lastLogin']) &&
                       request.resource.data.lastLogin == request.time;
      allow update: if request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'lastLogin']) &&
                       request.resource.data.lastLogin == request.time &&
                       !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'email']));
      allow delete: if false; // Disallow delete for simplicity
    }

    // Maps collection: Extremely simplified rules
    match /maps/{mapId} {
      // Allow authenticated users to create maps.
      // Creator becomes owner and is added to collaborators.
      allow create: if request.auth.uid != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.resource.data.collaborators[request.auth.uid] == 'owner' &&
                       request.resource.data.collaborators.keys().size() == 1 &&
                       request.resource.data.memberUIDs[0] == request.auth.uid &&
                       request.resource.data.memberUIDs.size() == 1 &&
                       request.resource.data.name is string &&
                       request.resource.data.gridState is map &&
                       request.resource.data.keys().hasAll(['name', 'ownerId', 'memberUIDs', 'collaborators', 'gridState', 'createdAt', 'updatedAt']) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // Allow users to read a map if their UID is a key in the collaborators map.
      allow read: if request.auth.uid != null &&
                     request.auth.uid in resource.data.collaborators.keys();

      // Allow updating if the user's UID is a key in the collaborators map.
      // ownerId and createdAt are immutable.
      allow update: if request.auth.uid != null &&
                       request.auth.uid in resource.data.collaborators.keys() &&
                       request.resource.data.ownerId == resource.data.ownerId && // ownerId is immutable
                       request.resource.data.createdAt == resource.data.createdAt && // createdAt is immutable
                       request.resource.data.updatedAt == request.time;

      // Only the owner can delete the map.
      allow delete: if request.auth.uid != null &&
                       request.auth.uid == resource.data.ownerId;
    }
  }
}
